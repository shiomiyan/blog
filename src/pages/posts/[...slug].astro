---
import { type CollectionEntry, getCollection } from "astro:content";
import Layout from "@layouts/Layout.astro";
import Container from "@components/Container.astro";
import TableOfContents from "@components/TableOfContents.astro";
import Tag from "@components/Tag.astro";
import Upvote from "@components/Upvote.astro";
import { TAGS } from "@lib/tags";

export const getStaticPaths = async () => {
	const posts = (await getCollection("posts"))
		.filter((post) => !post.data.draft)
		.sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf());
	return posts.map((post) => ({
		params: { slug: post.slug },
		props: post,
	}));
};

type Props = CollectionEntry<"posts">;
const post = Astro.props as Props;
const { date, title, description, tags, ulid } = post["data"];
const { Content, headings } = await post.render();
---

<Layout title={title} description={description}>
	<Container>
		<div class="my-10 space-y-1">
			<div class="flex items-center gap-2">
				<time datetime={date.toISOString()} class="text-sm">
					{
						date.toLocaleDateString("ja-JP", {
							month: "long",
							day: "2-digit",
							year: "numeric",
						})
					}
				</time>

				<div class="flex flex-wrap gap-2">
					{tags.map((tag) => <Tag tag={tag as keyof typeof TAGS} />)}
				</div>
			</div>
			<h1 class="text-3xl font-bold text-black">
				{title}
			</h1>
		</div>
		{headings.length > 0 && <TableOfContents headings={headings} />}
		<article class="break-words">
			<Content />
		</article>
		<Upvote postId={ulid} />
	</Container>
</Layout>
