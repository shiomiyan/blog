---
import Layout from "@layouts/Layout.astro";
import Container from "@components/Container.astro";
import Tag from "@components/Tag.astro";
import { getCollectionByCollectionKeys } from "@lib/utils";
import { TAGS } from "@/constants";

const posts = (
	await getCollectionByCollectionKeys("posts", "zenn", "qiita")
).filter((post) => post.data.tags);
const tagCounts = {} as Record<keyof typeof TAGS, number>;

for (const { data } of posts) {
	// TODO: data.tagsはundefinedになりえないと思うが、型推論がうまくいってない...？
	for (const tag of data.tags ?? []) {
		tagCounts[tag] = (tagCounts[tag] ?? 0) + 1;
	}
}

const tags = Object.entries(tagCounts)
	.map<{ slug: keyof typeof TAGS; count: number }>(([slug, count]) => ({
		slug: slug as keyof typeof TAGS,
		count,
	}))
	.sort((a, b) => a.slug.localeCompare(b.slug));

const meta = {
	description: "A list of all tags",
	title: "Tags",
};
---

<Layout {...meta}>
	<Container>
		<div class="space-y-10" data-pagefind-ignore="all">
			<div class="space-y-4">
				<section class="space-y-4">
					<ul
						class="grid list-none grid-cols-2 gap-2 md:grid-cols-3 lg:grid-cols-4"
					>
						{
							tags.map((tag) => (
								<li>
									<Tag tag={tag.slug} count={tag.count} />
								</li>
							))
						}
					</ul>
				</section>
			</div>
		</div>
	</Container>
</Layout>
